# Monitoring services for the realtime-backend
services:
  # Grafana - Visualization and monitoring dashboard
  grafana:
    image: grafana/grafana:10.0.3
    expose:
      - "3000"  # Only for the gateway
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # Admin username
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Admin password
      - GF_USERS_ALLOW_SIGN_UP=false  # Disable user registration
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource  # Required plugins
      - GF_SERVER_ROOT_URL=http://metrics.localhost  # Public URL
    volumes:
      - grafana-data:/var/lib/grafana  # Persistent storage
      - ./services/grafana/provisioning:/etc/grafana/provisioning  # Provisioning config
      - ./services/grafana/dashboards:/etc/grafana/dashboards  # Dashboard definitions
    depends_on:
      - timescaledb  # Requires database for data source
    networks:
      - backend

  # Prometheus - Monitoring and alerting system
  prometheus:
    image: prom/prometheus:v2.48.1
    volumes:
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - "9090"  # Only for the gateway
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Postgres Exporter - Metrics for TimescaleDB
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:password@timescaledb:5432/sensor_data?sslmode=disable"
    expose:
      - "9187"  # Only for internal services
    networks:
      - backend
    depends_on:
      - timescaledb

  # Kafka Exporter - Metrics for Kafka
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    command:
      - "--kafka.server=kafka:9092"
    expose:
      - "9308"  # Only for internal services
    networks:
      - backend
    depends_on:
      kafka:
        condition: service_healthy  # Wait until Kafka is healthy
    restart: always

  # Node Exporter - System metrics for monitoring
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    expose:
      - "9100"  # Only for internal services
    networks:
      - backend
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: always

  # Nginx Exporter - Detailed metrics for Nginx
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    command:
      - '-nginx.scrape-uri=http://nginx-gateway/nginx_status'
      - '-nginx.ssl-verify=false'
      - '-nginx.retries=10'
    expose:
      - "9113"  # Only for internal services
    networks:
      - backend
    depends_on:
      - nginx-gateway
    restart: always

# Persistent volumes for monitoring data
volumes:
  # Volume for Grafana data
  grafana-data:
  # Volume for Prometheus data
  prometheus-data:

# Networks (defined in the main docker-compose.yml)
networks:
  backend:
